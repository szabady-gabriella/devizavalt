package hu.gov.allamkincstar.devizavalt;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author szabadyg
 */
public class DevizaFrame extends javax.swing.JFrame {

    private static final String FILE_URL = "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml";
    private static final String FILE_NAME = "arfolyam.xml";

    private float ftArfolyamF;
    private float kivalasztottArfolyam;
    private float megadottErtek;

    /**
     * Új form felület készítése - DevizaFrame
     * Felület komponensek initelése
     * Adott URL-en lévő file beolvasása (FILE_URL)
     * String lista előállítása az állományból
     * Árfolyam értéklista feltöltése
     */
    public DevizaFrame() {
        //Felület komponensek initelése
        initComponents();
      
        InputStream in;
        
        //Adott URL-en lévő file beolvasása (FILE_URL)
        try {
            in = new URL(FILE_URL).openStream();
            Files.copy(in, Paths.get(FILE_NAME), StandardCopyOption.REPLACE_EXISTING);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevizaFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevizaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //String lista előállítása az állományból
        List<String> arfolyamLista = xMLFelolvas();

        //Árfolyam értéklista feltöltése
        if (arfolyamLista.size() > 0) {
            for (String str : arfolyamLista) {
                jComboBoxDeviza.addItem(str);
            };
            jTextFieldFtArfolyam.setText(String.valueOf(ftArfolyamF));
        }
    }

    /**
     * Generált kód: 
     * This method is called from within the constructor to
     * initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jButtonSzamolas = new javax.swing.JButton();
        jTextFieldFtArfolyam = new javax.swing.JTextField();
        jLabelFtArfolyam = new javax.swing.JLabel();
        jTextFieldMegadott = new javax.swing.JTextField();
        jComboBoxDeviza = new javax.swing.JComboBox<>();
        jLabelDevizaLOV = new javax.swing.JLabel();
        jLabelMegadottErtek = new javax.swing.JLabel();
        jLabelStamolt = new javax.swing.JLabel();
        jTextFieldSzamolt = new javax.swing.JTextField();
        jLabelKerekitett = new javax.swing.JLabel();
        jTextFieldKerekitett = new javax.swing.JTextField();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Devizaváltáshoz Számolási Segédlet");

        jButtonSzamolas.setText("Számolás");
        jButtonSzamolas.setPreferredSize(new java.awt.Dimension(79, 22));
        jButtonSzamolas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSzamolasActionPerformed(evt);
            }
        });

        jTextFieldFtArfolyam.setEditable(false);
        jTextFieldFtArfolyam.setPreferredSize(new java.awt.Dimension(7, 22));

        jLabelFtArfolyam.setText("Forint árfolyam:");
        jLabelFtArfolyam.setMaximumSize(new java.awt.Dimension(78, 14));
        jLabelFtArfolyam.setMinimumSize(new java.awt.Dimension(78, 14));

        jTextFieldMegadott.setMinimumSize(new java.awt.Dimension(7, 22));
        jTextFieldMegadott.setPreferredSize(new java.awt.Dimension(7, 22));
        jTextFieldMegadott.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMegadottActionPerformed(evt);
            }
        });
        jTextFieldMegadott.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldMegadottKeyTyped(evt);
            }
        });

        jComboBoxDeviza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDevizaActionPerformed(evt);
            }
        });

        jLabelDevizaLOV.setText("Deviza értéklista:");

        jLabelMegadottErtek.setText("Megadott érték:");

        jLabelStamolt.setText("Számolt érték:");

        jTextFieldSzamolt.setEditable(false);
        jTextFieldSzamolt.setMinimumSize(new java.awt.Dimension(7, 22));
        jTextFieldSzamolt.setPreferredSize(new java.awt.Dimension(7, 22));

        jLabelKerekitett.setText("Kerekített érték:");

        jTextFieldKerekitett.setEditable(false);
        jTextFieldKerekitett.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelMegadottErtek)
                    .addComponent(jLabelDevizaLOV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldMegadott, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSzamolas, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelStamolt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldSzamolt, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxDeviza, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelFtArfolyam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelKerekitett))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldFtArfolyam, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldKerekitett, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldFtArfolyam, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelFtArfolyam, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldKerekitett, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelKerekitett, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxDeviza, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDevizaLOV, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldMegadott, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMegadottErtek, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonSzamolas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldSzamolt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStamolt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param evt 
     * "Számolás" nyomógomb
     * kivalasztottArfolyam változó feltöltése az értéklista kiválasztott elemével
     * megadottErtek változó feltöltése a formról
     * Számolt érték / mező feltöltése: (a listában szereplő HUF árfolyam / Kiválasztott árfolyam) * a user által megadott értékkel
     * Kerekítés szerinti érték / mező feltöltése
     */
    private void jButtonSzamolasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSzamolasActionPerformed
        //kivalasztottArfolyam változó feltöltése az értéklista kiválasztott elemével
        if (jComboBoxDeviza.getSelectedItem() != null) {
            kivalasztottArfolyam = Float.valueOf(jComboBoxDeviza.getSelectedItem().toString().substring(5));
        } else {
            kivalasztottArfolyam = 0;
            jTextFieldSzamolt.setText("");
            jTextFieldKerekitett.setText("");
        }

        //megadottErtek változó feltöltése a formról
        if (jTextFieldMegadott.getText() != null && !jTextFieldMegadott.getText().isEmpty()) {
            megadottErtek = Float.valueOf(jTextFieldMegadott.getText());
        } else {
            megadottErtek = 0;
            jTextFieldSzamolt.setText("");
            jTextFieldKerekitett.setText("");
        }

        //Számolt érték / mező feltöltése: (a listában szereplő HUF árfolyam / Kiválasztott árfolyam) * a user által megadott értékkel
        //Kerekítés szerinti érték / mező feltöltése
        if (kivalasztottArfolyam > 0 && megadottErtek > 0) {
            jTextFieldSzamolt.setText(String.valueOf((ftArfolyamF / kivalasztottArfolyam) * megadottErtek));
            jTextFieldKerekitett.setText(String.valueOf((Math.round((ftArfolyamF / kivalasztottArfolyam) * megadottErtek / 5)) * 5));
        } else {
            jTextFieldSzamolt.setText("");
            jTextFieldKerekitett.setText("");
        }
    }//GEN-LAST:event_jButtonSzamolasActionPerformed

    /**
     * @param evt 
     * A "Megadott érték" mezőbe csak szám kerülhet, illetve BackSpace/Delete használható
     */
    private void jTextFieldMegadottKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMegadottKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jTextFieldMegadottKeyTyped

    /**
     * @param evt 
     * Deviza értéklistából történő választás esetén a számolt/kerekített érték kiürítése
     */
    private void jComboBoxDevizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDevizaActionPerformed
        jTextFieldSzamolt.setText("");
        jTextFieldKerekitett.setText("");
    }//GEN-LAST:event_jComboBoxDevizaActionPerformed

    /**
     * @param evt 
     * A jTextFieldMegadott mező kitörlése esetén megadottErtek változóba 0 érték kerül
     */
    private void jTextFieldMegadottActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMegadottActionPerformed
        if (jTextFieldMegadott.getText().equals(null)) {
            megadottErtek = 0;
        }
    }//GEN-LAST:event_jTextFieldMegadottActionPerformed

    /**
     * A megadott XML felolvasása
     * @return List / String
     */
    private List<String> xMLFelolvas() {
        List<String> vissza = new ArrayList<>();
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        try {
            if (FILE_NAME != null && !FILE_NAME.isEmpty()) {
                DocumentBuilder db = dbf.newDocumentBuilder();
                Document doc = db.parse(new File(FILE_NAME));
                doc.getDocumentElement().normalize();
                NodeList list = doc.getElementsByTagName("Cube");
                ftArfolyamF = 0;
                for (int temp = 0; temp < list.getLength(); temp++) {
                    Node node = list.item(temp);
                    if (node.getNodeType() == Node.ELEMENT_NODE) {
                        Element element = (Element) node;
                        if (element.getAttribute("currency") != null && !element.getAttribute("currency").isEmpty()
                                || element.getAttribute("rate") != null && !element.getAttribute("rate").isEmpty()) {
                            vissza.add(element.getAttribute("currency") + ": " + element.getAttribute("rate"));
                            if ("HUF".equals(element.getAttribute("currency"))) {
                                ftArfolyamF = Float.valueOf(element.getAttribute("rate"));
                            }
                        }
                    }
                }
            }
        } catch (ParserConfigurationException | SAXException | IOException e) {
            e.printStackTrace();
        }
        return vissza;
    }

    /**
     * @param args the command line arguments 
     * main függvvény
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DevizaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DevizaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DevizaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DevizaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DevizaFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSzamolas;
    private javax.swing.JComboBox<String> jComboBoxDeviza;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabelDevizaLOV;
    private javax.swing.JLabel jLabelFtArfolyam;
    private javax.swing.JLabel jLabelKerekitett;
    private javax.swing.JLabel jLabelMegadottErtek;
    private javax.swing.JLabel jLabelStamolt;
    private javax.swing.JTextField jTextFieldFtArfolyam;
    private javax.swing.JTextField jTextFieldKerekitett;
    private javax.swing.JTextField jTextFieldMegadott;
    private javax.swing.JTextField jTextFieldSzamolt;
    // End of variables declaration//GEN-END:variables
}
